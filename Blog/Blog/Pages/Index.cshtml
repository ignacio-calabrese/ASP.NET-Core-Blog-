@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="row">
    <h1 class="text-center">How to use ASP.Net Core With Docker</h1>
    <h4>Let me show you how simple it is to use <strong>ASP.NET Core with Docker</strong> to create a web Aplication.</h4>
    <h4>To do so first I am going to explain what they are and what each of these technologies is used for.</h4>
</div>

<div class="row">
    <div class="col-sm-12">
        <div class="col-sm-6">
            <h2>ASP.Net Core</h2>
            <img src="~/images/aspnetcore-logo.png" title="https://jorgonor.com/img/posts/aspnetcore-logo.png" />
            <p><strong>ASP.NET Core</strong> is an open source and multiplatform framework which gives us several benefits:</p>
            <ul>
                <li>You can build web apps and services, IoT apps, and mobile backends.</li>
                <li>You can deploy to the cloud or on-premises.</li>
                <li>You can run  your projects on .NET Core or .NET Framework.</li>
            </ul>
        </div>
        <div class="col-sm-6">
            <h2>Docker</h2>
            <img src="~/images/Docker_logo_011.0.png" width="50%" title="https://cdn.vox-cdn.com/thumbor/fbrTLtxuP2D29o8VJUaE-u3NKfU=/0x0:792x613/1200x800/filters:focal(300x237:426x363)/cdn.vox-cdn.com/uploads/chorus_image/image/59850273/Docker_logo_011.0.png" width="50%" />
            <p>
                <strong>Docker</strong> is an open source project that automates the deployment of applications within software containers, providing an additional layer of abstraction and automation of virtualization at the operating system level.
                <strong>Docker</strong> uses independent <strong>containers</strong> avoiding the overhead of starting and maintaining virtual machines.
            </p>
            <p>Software containers are packages of elements that allow you to run a specific application in any operating system. 
            The container acts as a cover for the software that enables it to function within the new environment. You just have to package the code and the tools that accompany it inside a container.</p>
        </div>
    </div>
</div>

<div class="row">
    <h1>Let´s start:</h1>
    <p>The combination of these two tools with <strong>Visual Studio 2017 in Windows</strong> makes it possible to create various complex elements in a very simple way.</p>
    <p>Here you have an example.</p>
    <p>First you must install <strong>Docker</strong>. To do so <a href="https://docs.docker.com/docker-for-windows/install/">go here to</a> download it. To install it all you have to do is to run the installer.</p>
    <p>Then install <strong>ASP.NET Core</strong>. To do so <a href="https://www.asp.net/ ">go here to</a> download it. To install it all you have to do is to run the installer but make sure to restart your computer after finishing the installation.</p>
    <p>Now you have everything you need to start a project.</p>
</div>

<div class="row">
    <h1>Creating a project</h1>
    <p>Open your <strong>Visual Studio 2017</strong>, go to <strong>"File" ---> "New" ---> "Project"</strong>.</p>
    <br />
    <img src="~/images/window1.png" width="50%" title="https://i.stack.imgur.com/ifOkz.png" />
    <br />
    <br />
    <p>In the window that opens choose <strong>"NET Core"</strong> in the left sidebar. In the options select <strong>"ASP:NET Core Web Aplication"</strong>. 
    Don´t forget to name your project so put the name at the bottom and then press <strong>"Ok"</strong>.</p>
    <p>It opens a new window.</p>
    <br />
    <img src="~/images/window2.jpg" title="https://developer.okta.com/assets/blog/build-crud-app-aspnetcore-angular/new-project-6143374ca7778a0272e26470286f8bc80a2a80f64bc7049f045bd82d93d6a97b.jpg" />
    <br />
    <br />
    <p>
        There you have all the project you can build with <strong>ASP.NET Core</strong>. Make sure that the version of <strong>ASP.NET Core</strong> is the one you installed before.
        As you can see when you choose a project, <strong>visual Studio</strong> gives you a description at the right side of the window indicating the type of project.
        Then you choose the type <strong>"Web Aplication(Model-View-Controller)"</strong>. At the bottom as you can see you can add Docker simply pressing the checkbox <strong>"Enable Docker Tools"</strong>.
        To finish all you have to do is to press <strong>"Ok"</strong>. The program creates a basic template which looks like this:
    </p>
    <br />
    <img src="~/images/window3.png" width="50%" title="https://developers.redhat.com/blog/wp-content/uploads/2016/05/s2i-aspnet.png" />
    <br />
    <br />
    <h1>Basic Concepts<h1></h1>
                      <p>To continue with a project more complex like a <strong>MVC Project</strong> remember that the <strong>ASP.NET Core</strong> separates the view, model and controller in three diferent folders:</p>
        <ul>
            <li>The view files are the files with extension .cshtml which are all the user sees.</li>
            <li>The model files are responsable to connect your project with a DataBase.</li>
            <li>The controller files are responsable to connect the model with the view.</li>
        </ul>
        <p>If to all this you add <strong>Docker</strong> you can run your project inside a <strong>container</strong> making it faster and it will run in any computer no matter in which Operaring System you are.</p>
        <h1>Next steps...</h1>
        <p>Now to make something more specific all you have to remember is:</p>
        <p>The only limit to make an <strong>ASP.NET Core project with Docker</strong> is your knowledge and your imagination.</p>
        <p>But this is only the beginning. It´s only a brief idea of what you can create using these tho incredible tecnologies. 
        I suggest you contact our <strong>technical department</strong> and they will give you a wider information.</p>
        <h1>Sources</h1>
        <p>To know more about this two incredible tecnologies check these links.</p>
        <p>ASP:NET Core</p>
        <ul>
            <li><a href="https://docs.microsoft.com/en-us/dotnet/core/docker/docker-basics-dotnet-core">Microsoft.com: Learn Docker Basics with .NET Core</a></li>
            <li><a href="https://www.asp.net/core/overview/aspnet-vnext">https://www.asp.net/core/</a></li>
            <li><a href="https://en.wikipedia.org/wiki/ASP.NET_Core">Wikipedia</a></li>
            <li><a href="https://www.youtube.com/watch?v=6tQBCNHWtAU">Youtube: Introducción .NET CORE</a></li>
            <li><a href="https://www.youtube.com/watch?v=CT_z2zyUEFU">Youtube: Introducción a Asp.net Core</a></li>
            <li><a href="https://www.youtube.com/watch?v=4FrKuVvISVQ">Youtube: 1- Introducción a ASP.NET CORE 2 - Qué es MVC | Programando ASP.NET CORE 2</a></li>
            <li><a href="https://www.youtube.com/watch?v=1kJW_WygFo4">Youtube: Curso de ASP NET #Core #MVC en C# Creando la primera #App #Web #1</a></li>
            <li><a href="http://info.bravent.net/que-es-asp.net-core">¿QUÉ ES ASP.NET CORE?</a></li>
        </ul>

        <p>Docker</p>
        <ul>
            <li><a href="https://www.docker.com/">https://www.docker.com/</a></li>
            <li><a href="https://en.wikipedia.org/wiki/Docker_(software)">wikipedia</a></li>
            <li><a href="https://www.youtube.com/watch?v=PAmN-QUffbo">Youtube: Docker and ASP.NET Core</a></li>
            <li><a href="https://www.sesispla.net/blog/2016/08/como-ejecutar-aspnet-core-docker/">Youtube: Cómo ejecutar ASP.NET Core en Docker</a></li>
            <li><a href="https://www.youtube.com/watch?v=2MZbEHIw5FE">Youtube: Docker sencillo: introducción, en Español</a></li>
            <li><a href="https://www.youtube.com/watch?v=hFCwfHo_Kbc">Youtube: .NET Docker Development with Visual Studio 2017</a></li>
            <li><a href="https://www.youtube.com/watch?v=Fv-97I_wrJ0">Youtube: 01.- Curso de Docker. La Revolución de los Contenedores.</a></li>
            <li><a href="https://www.youtube.com/watch?v=5z2kYFG3OfY">Youtube: Curso Docker Sencillo para desarrolladores #1 Presentación | Español</a></li>
        </ul>



</div>